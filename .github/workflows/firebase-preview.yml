name: Firebase Hosting Preview

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  preview:
    name: Build and Deploy Preview
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup PNPM
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build project
        run: pnpm build

      - name: Deploy to Firebase Hosting preview
        if: ${{ !github.event.pull_request.head.repo.fork }}
        id: firebase
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          projectId: ${{ vars.PROJECT_ID }}
          channelId: pr-${{ github.event.pull_request.number }}
          disableComment: true

      - name: Comment preview URL on PR
        if: steps.firebase.outputs.details_url
        uses: actions/github-script@v7
        env:
          PREVIEW_URL: ${{ steps.firebase.outputs.details_url }}
        with:
          script: |
            const marker = '<!-- firebase-hosting-preview -->';
            const previewUrl = process.env.PREVIEW_URL;

            if (!previewUrl) {
              core.warning('Firebase deploy did not return a preview URL.');
              return;
            }

            const body = `${marker}\nFirebase Hosting preview is available at: ${previewUrl}`;
            const { owner, repo } = context.repo;
            const issue_number = context.issue.number;

            const existingComments = await github.rest.issues.listComments({
              owner,
              repo,
              issue_number,
            });

            const previous = existingComments.data.find(comment =>
              comment.user?.type === 'Bot' && comment.body?.startsWith(marker)
            );

            if (previous) {
              await github.rest.issues.updateComment({
                owner,
                repo,
                comment_id: previous.id,
                body,
              });
            } else {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number,
                body,
              });
            }
